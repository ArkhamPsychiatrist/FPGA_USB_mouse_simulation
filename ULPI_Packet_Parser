module USBPacketParser (
    input wire clk,                  // Clock signal
    input wire reset,                // Reset signal
    input wire [7:0] usb_data,       // USB data from the PHY
    input wire nxt,                  // Next byte valid signal (from PHY)
    input wire stp,                  // Strobe signal indicating valid data
    input wire dir,                  // Direction of transfer (IN or OUT)
    output reg [3:0] pid,            // Packet ID (PID) from the packet
    output reg [6:0] address,        // USB device address
    output reg [3:0] endpoint,       // Endpoint number
    output reg packet_valid,         // Flag indicating that a complete packet has been parsed
    output reg [7:0] data           // Data byte to send to the state machine
);

    // Internal states for packet parsing
    reg [2:0] state;
    localparam IDLE = 3'd0, HEADER = 3'd1, PAYLOAD = 3'd2;
    
    // Buffer to hold incoming data for packet parsing
    reg [7:0] packet_buffer [0:7];
    reg [2:0] buffer_index;

    // Parsing and state transition logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset all signals and internal states
            pid <= 4'd0;
            address <= 7'd0;
            endpoint <= 4'd0;
            packet_valid <= 0;
            buffer_index <= 3'd0;
            state <= IDLE;
        end else if (nxt && stp) begin  // When next byte is valid
            // Store the incoming byte in the packet buffer
            packet_buffer[buffer_index] <= usb_data;

            case (state)
                IDLE: begin
                    // First byte should be the PID (Packet ID)
                    pid <= usb_data[3:0];  // Capture PID from incoming data byte
                    state <= HEADER;        // Transition to the header state
                    buffer_index <= 3'd1;   // Prepare to receive next byte (address)
                end

                HEADER: begin
                    // Parse the header: address and endpoint
                    if (buffer_index == 3'd1) begin
                        address <= usb_data[6:0];  // Capture the device address from the second byte
                    end else if (buffer_index == 3'd2) begin
                        endpoint <= usb_data[3:0]; // Capture the endpoint number from the third byte
                        state <= PAYLOAD;         // Transition to payload state
                        buffer_index <= 3'd3;     // Ready for receiving payload data
                    end else begin
                        buffer_index <= buffer_index + 1;
                    end
                end

                PAYLOAD: begin
                    // Capture the payload data bytes
                    data <= usb_data;  // Store the incoming data byte for processing
                    packet_valid <= 1;  // Indicate a valid packet is ready
                    buffer_index <= 3'd0;  // Reset buffer index for the next packet
                    state <= IDLE;         // Return to IDLE state, awaiting next packet
                end
            endcase
        end else begin
            // If no valid data, set packet_valid to 0
            packet_valid <= 0;
        end
    end

endmodule



/*

module USBPacketParser (
    input wire clk,                    // System clock
    input wire reset,                  // Reset signal
    input wire [7:0] usb_data,         // Raw USB data stream
    input wire usb_data_valid,         // Indicates valid USB data
    output reg [3:0] pid,              // Packet ID (PID)
    output reg [6:0] address,          // Device address
    output reg [3:0] endpoint,         // Endpoint number
    output reg [7:0] payload_data,     // Parsed payload data
    output reg payload_valid,          // Payload valid flag
    output reg [2:0] packet_type,      // Packet type (SETUP, IN, OUT, ACK, NAK, STALL, SOF)
    output reg packet_valid            // Packet is fully parsed and valid
);

    // Define packet type encoding
    localparam PACKET_SETUP = 3'd0;
    localparam PACKET_IN    = 3'd1;
    localparam PACKET_OUT   = 3'd2;
    localparam PACKET_ACK   = 3'd3;    // Handshake packet (ACK)
    localparam PACKET_NAK   = 3'd4;    // Handshake packet (NAK)
    localparam PACKET_STALL = 3'd5;    // Handshake packet (STALL)
    localparam PACKET_SOF   = 3'd6;    // Start of Frame (SOF) packet

    // State machine states
    localparam IDLE = 3'd0;
    localparam HEADER = 3'd1;
    localparam PAYLOAD = 3'd2;

    // Internal registers
    reg [7:0] packet_buffer [0:7];      // Buffer for incoming packet data
    reg [2:0] buffer_index;             // Tracks current byte in packet buffer
    reg [2:0] state;                    // Current state of the parser

    // Reset and initialization
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            pid <= 4'd0;
            address <= 7'd0;
            endpoint <= 4'd0;
            payload_data <= 8'd0;
            payload_valid <= 1'b0;
            packet_type <= 3'd0;
            packet_valid <= 1'b0;
            buffer_index <= 3'd0;
            state <= IDLE;
        end else if (usb_data_valid) begin
            // Store incoming data into packet buffer
            packet_buffer[buffer_index] <= usb_data;

            case (state)
                IDLE: begin
                    // Waiting for first byte (PID)
                    if (usb_data_valid) begin
                        pid <= usb_data[3:0];   // Capture PID
                        case (usb_data[3:0])
                            4'b1101: packet_type <= PACKET_SETUP; // SETUP PID
                            4'b1001: packet_type <= PACKET_IN;    // IN PID
                            4'b0001: packet_type <= PACKET_OUT;   // OUT PID
                            4'b1100: packet_type <= PACKET_ACK;   // ACK PID
                            4'b1010: packet_type <= PACKET_NAK;   // NAK PID
                            4'b0111: packet_type <= PACKET_STALL; // STALL PID
                            4'b0101: packet_type <= PACKET_SOF;   // SOF PID
                            default: packet_type <= 3'd7;         // Unknown packet type
                        endcase
                        state <= HEADER;    // Move to header parsing state
                        buffer_index <= 3'd0;
                    end
                end
                
                HEADER: begin
                    // Parse the address and endpoint from the packet header
                    if (buffer_index == 3'd1) begin
                        address <= usb_data[6:0];    // Extract address
                    end else if (buffer_index == 3'd2) begin
                        endpoint <= usb_data[3:0];   // Extract endpoint
                        // Transition to PAYLOAD as soon as header parsing is complete
                        state <= PAYLOAD;
                        buffer_index <= 3'd0;       // Reset buffer index for PAYLOAD parsing
                    end else begin
                        buffer_index <= buffer_index + 1; // Increment buffer index
                    end
                end

                PAYLOAD: begin
                    // Capture payload data (for IN/OUT packets)
                    payload_data <= usb_data;   // Store the data byte
                    payload_valid <= 1'b1;      // Mark payload as valid
                    packet_valid <= 1'b1;       // Mark entire packet as valid

                    // Reset the parser after the payload is captured
                    if (buffer_index == 3'd7) begin
                        buffer_index <= 3'd0;
                        state <= IDLE;
                    end else begin
                        buffer_index <= buffer_index + 1; // Increment buffer index
                    end
                end
                
                default: begin
                    state <= IDLE;  // Default to IDLE state on any invalid state
                end
            endcase
        end else begin
            payload_valid <= 1'b0;
            packet_valid <= 1'b0;
        end
    end
endmodule
*/
